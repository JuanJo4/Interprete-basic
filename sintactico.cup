import java_cup.runtime.*;
import java.io.*;

parser code{:

  public static void main(String args[]) throws Exception{
    parser sintactico;
	
	if(args.length>0){
		sintactico = new parser(new Scanner(new FileInputStream(args[0])));
		sintactico.parse();
	}else{
		System.out.println("No se encontró el código fuente (Parámetro incorrecto)");
	}
    
  }

:}


/*	Simbolos
	terminales	*/
	
terminal ASTERISK;
terminal INPUT;
terminal SLASH;
terminal LESS_THAN;
terminal ELSE;
terminal PLUS;
terminal RPAREN;
terminal THEN;
terminal CONCAT;
terminal END;
terminal IF;
terminal LPAREN;
terminal PRINT;
terminal ID;
terminal NUM_ENTERO;
terminal MINUS;
terminal LOOP_UNTIL;
terminal ASSIGN;
terminal EQUAL;
terminal ENDIF;
terminal WHILE;
terminal ENDWHILE;
terminal DO;
terminal FOR;
terminal TO;
terminal STEP;
terminal NEXT;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal AND;
terminal OR;
terminal NOT;
terminal LESS_THAN_EQ;
terminal GREATER_THAN;
terminal GREATER_THAN_EQ;
terminal CIRCUMFLEX;
terminal LPOPPER;
terminal RPOPPER;
terminal NEW_LINE;
terminal DIFFERENT;
terminal MODULE;
terminal PROCEDURE;
terminal ENDPROCEDURE;
terminal COMMA;
terminal NUM_FLOTANTE;
terminal CADENA;

/*	Simbolos
	no terminales	*/

non terminal programa;
non terminal sub_programa;
non terminal secuencia_sent;
non terminal sentencia;
non terminal sent_declaracion;
non terminal tipo_dato;
non terminal list_var;
non terminal sent_asignacion;
non terminal sent_escribir;
non terminal list_impresion;
non terminal sent_leer;
non terminal sent_if;
non terminal sent_for;
non terminal sent_do;
non terminal sent_while;
non terminal def_proc;
non terminal call_proc;
non terminal list_param;
non terminal expresion_compuesta;
non terminal op_logico;
non terminal expresion_comparacion;
non terminal op_comparacion;
non terminal expresion_simple;
non terminal op_suma;
non terminal term;
non terminal op_mult;
non terminal factor;


/* Precedencia
	de operadores */

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left GREATER_THAN, LESS_THAN, GREATER_THAN_EQ, LESS_THAN_EQ, EQUAL, DIFFERENT;//revisar
precedence left PLUS, MINUS;
precedence left SLASH, ASTERISK, MODULE;
precedence right CIRCUMFLEX;
precedence left LPAREN, RPAREN;


/*	REGLAS 
	GRAMATICALES */

programa				::= secuencia_sent NEW_LINE END							
							| secuencia_sent NEW_LINE END NEW_LINE
							| NEW_LINE secuencia_sent NEW_LINE END							
							| NEW_LINE secuencia_sent NEW_LINE END NEW_LINE
							| secuencia_sent NEW_LINE END NEW_LINE sub_programa
							| secuencia_sent NEW_LINE END NEW_LINE sub_programa NEW_LINE
							| NEW_LINE secuencia_sent NEW_LINE END NEW_LINE sub_programa
							| NEW_LINE secuencia_sent NEW_LINE END NEW_LINE sub_programa NEW_LINE
							| END
							| END NEW_LINE
							| NEW_LINE END NEW_LINE							
							| END NEW_LINE sub_programa
							| END NEW_LINE sub_programa NEW_LINE
							| NEW_LINE END NEW_LINE sub_programa
							| NEW_LINE END NEW_LINE sub_programa NEW_LINE;
							
sub_programa			::= sub_programa NEW_LINE def_proc
							| def_proc;
							
secuencia_sent			::= secuencia_sent NEW_LINE sentencia
							| sentencia;
					
sentencia				::= sent_declaracion
							| sent_asignacion
							| sent_escribir
							| sent_leer
							| sent_if
							| sent_for
							| sent_do
							| sent_while							
							| call_proc;

sent_declaracion		::=	tipo_dato list_var;

tipo_dato				::= INTEGER | FLOAT | STRING;

list_var				::=	list_var COMMA ID
							| list_var COMMA ID LPOPPER NUM_ENTERO RPOPPER
							| ID LPOPPER NUM_ENTERO RPOPPER
							| ID;							
						
sent_asignacion			::= ID ASSIGN expresion_simple;
						
sent_escribir			::= PRINT list_impresion;

list_impresion			::= list_impresion CONCAT expresion_simple							
							| expresion_simple;
						
sent_leer				::=	INPUT ID
							| INPUT CADENA COMMA ID;
						
sent_if					::=	IF expresion_compuesta THEN NEW_LINE 
								secuencia_sent NEW_LINE
								ENDIF
							| IF expresion_compuesta THEN NEW_LINE 
								secuencia_sent NEW_LINE 
								ELSE NEW_LINE
								secuencia_sent NEW_LINE
								ENDIF;

sent_for				::= FOR ID ASSIGN expresion_simple TO expresion_simple NEW_LINE
								secuencia_sent NEW_LINE
								NEXT ID
							| FOR ID ASSIGN expresion_simple TO expresion_simple STEP expresion_simple NEW_LINE
								secuencia_sent NEW_LINE
								NEXT ID;
								
sent_do					::= DO NEW_LINE
								secuencia_sent NEW_LINE
								LOOP_UNTIL expresion_compuesta;
								
sent_while				::= WHILE expresion_compuesta NEW_LINE
								secuencia_sent NEW_LINE
								ENDWHILE;
								
def_proc				::=	PROCEDURE ID LPAREN RPAREN NEW_LINE
								secuencia_sent NEW_LINE
								ENDPROCEDURE
							| PROCEDURE ID LPAREN list_param RPAREN NEW_LINE
								secuencia_sent NEW_LINE
								ENDPROCEDURE;
	
list_param				::= list_param COMMA tipo_dato ID
							| tipo_dato ID;	
						
call_proc				::= ID LPAREN list_var RPAREN
							| ID LPAREN RPAREN;						

expresion_compuesta		::=	expresion_compuesta op_logico expresion_comparacion
						| expresion_comparacion;
						
op_logico				::=	AND | OR;

expresion_comparacion	::=	NOT expresion_simple op_comparacion expresion_simple
							| expresion_simple op_comparacion expresion_simple;
							
op_comparacion			::=	EQUAL | DIFFERENT
							| LESS_THAN | LESS_THAN_EQ
							| GREATER_THAN | GREATER_THAN_EQ;

expresion_simple	::= expresion_simple op_suma term
						| term;
						
op_suma				::=	PLUS | MINUS;

term				::= term op_mult factor
						| factor;
						
op_mult				::=	ASTERISK | SLASH | MODULE | CIRCUMFLEX;

factor				::= LPAREN expresion_simple RPAREN
						| NUM_ENTERO
						| NUM_FLOTANTE
						| ID
						| CADENA;