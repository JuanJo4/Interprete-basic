package sintactico;

import arbol.*;
import arbol.Nodo.TIPO;
import arbol.Declaracion.TIPODATO;
import lexico.Scanner;
import java.io.FileInputStream;
import java_cup.runtime.*;

parser code{:
	
	public static void main(String args[]) throws Exception{
		parser sintactico;
	
		if(args.length>0){
			sintactico = new parser(new Scanner(new FileInputStream(args[0])));
			sintactico.parse();
		}else{
			System.out.println("No se encontró el código fuente (Parámetro incorrecto)");
		}
    
	}

:}

action code{:
	private Nodo arbol = new Nodo(TIPO.programa);
:}


/*	Simbolos
	terminales	*/
	
terminal ASTERISK;
terminal INPUT;
terminal SLASH;
terminal LESS_THAN;
terminal ELSE;
terminal PLUS;
terminal RPAREN;
terminal THEN;
terminal CONCAT;
terminal END;
terminal IF;
terminal LPAREN;
terminal PRINT;
terminal String ID;
terminal Integer NUM_ENTERO;
terminal MINUS;
terminal LOOP_UNTIL;
terminal ASSIGN;
terminal EQUAL;
terminal ENDIF;
terminal WHILE;
terminal ENDWHILE;
terminal DO;
terminal FOR;
terminal TO;
terminal STEP;
terminal NEXT;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal AND;
terminal OR;
terminal NOT;
terminal LESS_THAN_EQ;
terminal GREATER_THAN;
terminal GREATER_THAN_EQ;
terminal CIRCUMFLEX;
terminal LPOPPER;
terminal RPOPPER;
terminal NEW_LINE;
terminal DIFFERENT;
terminal MODULE;
terminal PROCEDURE;
terminal ENDPROCEDURE;
terminal COMMA;
terminal NUM_FLOTANTE;
terminal CADENA;

/*	Simbolos
	no terminales	*/

non terminal Nodo programa;
non terminal Nodo sub_programa;
non terminal Nodo secuencia_sent;
non terminal Nodo sentencia;
non terminal Nodo sent_declaracion;
non terminal TIPODATO tipo_dato;
non terminal Nodo list_var;
non terminal Nodo sent_asignacion;
non terminal Nodo sent_escribir;
non terminal Nodo list_impresion;
non terminal Nodo sent_leer;
non terminal Nodo sent_if;
non terminal Nodo sent_for;
non terminal Nodo sent_do;
non terminal Nodo sent_while;
non terminal Nodo def_proc;
non terminal Nodo call_proc;
non terminal Nodo list_param;
non terminal Nodo expresion_compuesta;
non terminal Nodo op_logico;
non terminal Nodo expresion_comparacion;
non terminal Nodo op_comparacion;
non terminal Nodo expresion_simple;
non terminal Nodo op_suma;
non terminal Nodo term;
non terminal Nodo op_mult;
non terminal Nodo factor;


/* Precedencia
	de operadores */

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left GREATER_THAN, LESS_THAN, GREATER_THAN_EQ, LESS_THAN_EQ, EQUAL, DIFFERENT;//revisar
precedence left PLUS, MINUS;
precedence left SLASH, ASTERISK, MODULE;
precedence left LPAREN, RPAREN;
precedence right CIRCUMFLEX;



/*	REGLAS 
	GRAMATICALES */

programa				::= secuencia_sent:secuencia NEW_LINE END									
								{:
									arbol.add(secuencia);
									arbol.printTree();
								:}
							| secuencia_sent:secuencia NEW_LINE END NEW_LINE
								{:
									arbol.add(secuencia);
								:}
							| NEW_LINE secuencia_sent:secuencia NEW_LINE END
								{:
									arbol.add(secuencia);
								:}
							| NEW_LINE secuencia_sent:secuencia NEW_LINE END NEW_LINE
								{:
									arbol.add(secuencia);
								:}
							| secuencia_sent:secuencia NEW_LINE END NEW_LINE sub_programa:sub		
								{:	
									arbol.add(secuencia);
									arbol.add(sub);								
								:}
							| secuencia_sent:secuencia NEW_LINE END NEW_LINE sub_programa:sub NEW_LINE
								{:
									arbol.add(secuencia);
									arbol.add(sub);								
								:}
							| NEW_LINE secuencia_sent:secuencia NEW_LINE END NEW_LINE sub_programa:sub
								{:	
									arbol.add(secuencia);
									arbol.add(sub);								
								:}
							| NEW_LINE secuencia_sent:secuencia NEW_LINE END NEW_LINE sub_programa:sub NEW_LINE
								{:	
									arbol.add(secuencia);
									arbol.add(sub);								
								:}
							| END
							| END NEW_LINE
							| NEW_LINE END NEW_LINE							
							| END NEW_LINE sub_programa
							| END NEW_LINE sub_programa NEW_LINE
							| NEW_LINE END NEW_LINE sub_programa
							| NEW_LINE END NEW_LINE sub_programa NEW_LINE
							| error {:	System.out.println("Error sintáctico!"); :};
							
sub_programa			::= sub_programa:sub NEW_LINE def_proc:proc
								{:
									Nodo tmp = new Nodo(TIPO.sub_programa);
									tmp.add(sub);
									tmp.add(proc);
									
									RESULT = tmp;
								:}
							| def_proc:proc
								{:
									RESULT = proc;
								:};
							
secuencia_sent			::= secuencia_sent:secuencia NEW_LINE sentencia:sent
								{:
									Nodo tmp = new Nodo(TIPO.secuencia_sent);
									tmp.add(secuencia);
									tmp.add(sent);

									RESULT = tmp;
								:}
							| sentencia:sent
								{:
									RESULT = sent;
								:};
					
sentencia				::= sent_declaracion:declaracion
								{:
									RESULT = declaracion;
								:}
							| sent_asignacion:asignacion
								{:
									RESULT = asignacion;
								:}
							| sent_escribir:escribir
								{:
									RESULT = escribir;
								:}
							| sent_leer:leer
								{:
									RESULT = leer;
								:}
							| sent_if:decision
								{:
									RESULT = decision;
								:}
							| sent_for:buclepara
								{:
									RESULT = buclepara;
								:}
							| sent_do:buclehaga
								{:
									RESULT = buclehaga;
								:}
							| sent_while:buclemientras
								{:
									RESULT = buclemientras;
								:}
							| call_proc:callproc
								{:
									RESULT = callproc;
								:};

sent_declaracion		::=	tipo_dato:tipodato list_var:listvar
							{:
								RESULT = new Declaracion(tipodato,listvar);
							:}
							;

tipo_dato				::= INTEGER {:	RESULT = TIPODATO.INTEGER; :}
							| FLOAT {:	RESULT = TIPODATO.FLOAT; :}
							| STRING {:	RESULT = TIPODATO.STRING; :};

list_var				::=	list_var:listvar COMMA ID:ID
								{:
									Nodo tmp = new Nodo(TIPO.list_var);									
									tmp.add(listvar);
									tmp.add(new Identificador(ID,-1,-1,null));
									
									RESULT = tmp;
								:}
							| list_var:listvar COMMA ID:ID LPOPPER NUM_ENTERO:tam RPOPPER
								{:
									Nodo tmp = new Nodo(TIPO.list_var);									
									tmp.add(listvar);
									tmp.add(new Identificador(ID,tam,-1,null));
									
									RESULT = tmp;
								:}
							| ID:ID LPOPPER NUM_ENTERO:tam RPOPPER
								{:								
									RESULT = new Identificador(ID,tam,-1,null);
								:}
							| ID:ID
								{:								
									RESULT = new Identificador(ID,-1,-1,null);
								:};							
						
sent_asignacion			::= ID ASSIGN expresion_simple
							| ID LPOPPER NUM_ENTERO RPOPPER ASSIGN expresion_simple;
						
sent_escribir			::= PRINT list_impresion;

list_impresion			::= list_impresion CONCAT expresion_simple							
							| expresion_simple;
						
sent_leer				::=	INPUT ID
							| INPUT CADENA COMMA ID;
						
sent_if					::=	IF expresion_compuesta THEN NEW_LINE 
								secuencia_sent NEW_LINE
								ENDIF
							| IF expresion_compuesta THEN NEW_LINE 
								secuencia_sent NEW_LINE 
								ELSE NEW_LINE
								secuencia_sent NEW_LINE
								ENDIF;

sent_for				::= FOR ID ASSIGN expresion_simple TO expresion_simple NEW_LINE
								secuencia_sent NEW_LINE
								NEXT ID
							| FOR ID ASSIGN expresion_simple TO expresion_simple STEP expresion_simple NEW_LINE
								secuencia_sent NEW_LINE
								NEXT ID;
								
sent_do					::= DO NEW_LINE
								secuencia_sent NEW_LINE
								LOOP_UNTIL expresion_compuesta;
								
sent_while				::= WHILE expresion_compuesta NEW_LINE
								secuencia_sent NEW_LINE
								ENDWHILE;
								
def_proc				::=	PROCEDURE ID LPAREN RPAREN NEW_LINE
								secuencia_sent NEW_LINE
								ENDPROCEDURE
							| PROCEDURE ID LPAREN list_param RPAREN NEW_LINE
								secuencia_sent NEW_LINE
								ENDPROCEDURE;
	
list_param				::= list_param COMMA tipo_dato ID
							| tipo_dato ID;	
						
call_proc				::= ID LPAREN list_var RPAREN
							| ID LPAREN RPAREN;						

expresion_compuesta		::=	expresion_compuesta op_logico expresion_comparacion
						| expresion_comparacion;
						
op_logico				::=	AND | OR;

expresion_comparacion	::=	NOT expresion_simple op_comparacion expresion_simple
							| expresion_simple op_comparacion expresion_simple;
							
op_comparacion			::=	EQUAL | DIFFERENT
							| LESS_THAN | LESS_THAN_EQ
							| GREATER_THAN | GREATER_THAN_EQ;

expresion_simple	::= expresion_simple op_suma term 
						| term;
						
op_suma				::=	PLUS | MINUS;

term				::= term op_mult factor
						| factor;
						
op_mult				::=	ASTERISK | SLASH | MODULE | CIRCUMFLEX;

factor				::= LPAREN expresion_simple RPAREN
						| NUM_ENTERO
						| NUM_FLOTANTE
						| ID
						| CADENA;