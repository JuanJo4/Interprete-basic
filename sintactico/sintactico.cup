package sintactico;

import arbol.*;
import arbol.Nodo.TIPO;
import arbol.Variable.DATO;
import arbol.Operacion.OP;
import lexico.Scanner;
import java_cup.runtime.*;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;

parser code{:
	
	public static void main(String args[]) throws Exception{
		parser sintactico;
	
		if(args.length>0){
			sintactico = new parser(new Scanner(new FileInputStream(args[0])));
			sintactico.parse();
		}else{
			System.out.println("No se encontró el código fuente (Parámetro incorrecto)");
		}
    
	}

:}

action code{:
	private Nodo arbol = new Nodo(TIPO._PROGRAMA_);
	
	private Symbols tabla_simbolos = new Symbols();
	private InputStreamReader entrada = new InputStreamReader(System.in);
    private BufferedReader buf = new BufferedReader (entrada);
:}

/*	Simbolos
	terminales	*/
	
terminal ASTERISK;
terminal INPUT;
terminal SLASH;
terminal LESS_THAN;
terminal ELSE;
terminal PLUS;
terminal RPAREN;
terminal THEN;
terminal CONCAT;
terminal END;
terminal IF;
terminal LPAREN;
terminal PRINT;
terminal String ID;
terminal Integer NUM_ENTERO;
terminal MINUS;
terminal LOOP_UNTIL;
terminal ASSIGN;
terminal EQUAL;
terminal ENDIF;
terminal WHILE;
terminal ENDWHILE;
terminal DO;
terminal FOR;
terminal TO;
terminal STEP;
terminal NEXT;
terminal INTEGER;
terminal Float FLOAT;
terminal STRING;
terminal AND;
terminal OR;
terminal NOT;
terminal LESS_THAN_EQ;
terminal GREATER_THAN;
terminal GREATER_THAN_EQ;
terminal CIRCUMFLEX;
terminal LPOPPER;
terminal RPOPPER;
terminal NEW_LINE;
terminal DIFFERENT;
terminal MODULE;
terminal PROCEDURE;
terminal ENDPROCEDURE;
terminal COMMA;
terminal NUM_FLOTANTE;
terminal String CADENA;

/*	Simbolos
	no terminales	*/

non terminal Nodo programa;
non terminal Nodo sub_programa;
non terminal Nodo secuencia_sent;
non terminal Nodo sentencia;
non terminal Nodo sent_declaracion;
non terminal DATO tipo_dato;
non terminal Nodo list_var;
non terminal Nodo sent_asignacion;
non terminal Nodo sent_escribir;
non terminal Nodo list_impresion;
non terminal Nodo sent_leer;
non terminal Nodo sent_if;
non terminal Nodo sent_for;
non terminal Nodo sent_do;
non terminal Nodo sent_while;
non terminal Nodo def_proc;
non terminal Nodo call_proc;
non terminal Nodo list_param;
non terminal Nodo expresion_compuesta;
non terminal Nodo op_logico;
non terminal Nodo expresion_comparacion;
non terminal Nodo op_comparacion;
non terminal Nodo expresion_simple;
non terminal OP op_suma;
non terminal Nodo term;
non terminal OP op_mult;
non terminal Nodo factor;


/* Precedencia
	de operadores */

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left GREATER_THAN, LESS_THAN, GREATER_THAN_EQ, LESS_THAN_EQ, EQUAL, DIFFERENT;//revisar
precedence left PLUS, MINUS;
precedence left SLASH, ASTERISK, MODULE;
precedence left LPAREN, RPAREN;
precedence right CIRCUMFLEX;



/*	REGLAS 
	GRAMATICALES */

programa				::= secuencia_sent:secuencia NEW_LINE END									
								{:
									arbol.add(secuencia);									
									arbol.printTree();									
								:}
							| secuencia_sent:secuencia NEW_LINE END NEW_LINE
								{:
									arbol.add(secuencia);
								:}
							| NEW_LINE secuencia_sent:secuencia NEW_LINE END
								{:
									arbol.add(secuencia);
								:}
							| NEW_LINE secuencia_sent:secuencia NEW_LINE END NEW_LINE
								{:
									arbol.add(secuencia);
								:}
							| secuencia_sent:secuencia NEW_LINE END NEW_LINE sub_programa:sub		
								{:	
									arbol.add(secuencia);
									arbol.add(sub);								
								:}
							| secuencia_sent:secuencia NEW_LINE END NEW_LINE sub_programa:sub NEW_LINE
								{:
									arbol.add(secuencia);
									arbol.add(sub);								
								:}
							| NEW_LINE secuencia_sent:secuencia NEW_LINE END NEW_LINE sub_programa:sub
								{:	
									arbol.add(secuencia);
									arbol.add(sub);								
								:}
							| NEW_LINE secuencia_sent:secuencia NEW_LINE END NEW_LINE sub_programa:sub NEW_LINE
								{:	
									arbol.add(secuencia);
									arbol.add(sub);								
								:}
							| END
							| END NEW_LINE
							| NEW_LINE END NEW_LINE							
							| END NEW_LINE sub_programa
							| END NEW_LINE sub_programa NEW_LINE
							| NEW_LINE END NEW_LINE sub_programa
							| NEW_LINE END NEW_LINE sub_programa NEW_LINE
							| error {:	System.out.println("Error sintáctico!"); :};
							
sub_programa			::= sub_programa:sub NEW_LINE def_proc:proc
								{:
									Nodo tmp = new Nodo(TIPO.sub_programa);
									tmp.add(sub);
									tmp.add(proc);
									
									RESULT = tmp;
								:}
							| def_proc:proc
								{:
									Nodo tmp = new Nodo(TIPO.sub_programa);
									tmp.add(proc);
									RESULT = tmp;
								:};
							
secuencia_sent			::= secuencia_sent:secuencia NEW_LINE sentencia:sent
								{:
									Nodo tmp = new Nodo(TIPO.secuencia_sent);
									tmp.add(secuencia);
									tmp.add(sent);

									RESULT = tmp;
								:}
							| sentencia:sent
								{:
									Nodo tmp = new Nodo(TIPO.secuencia_sent);									
									tmp.add(sent);
									RESULT = tmp;
								:};
					
sentencia				::= sent_declaracion:declaracion
								{:
									RESULT = declaracion;
								:}
							| sent_asignacion:asignacion
								{:
									RESULT = asignacion;
								:}
							| sent_escribir:escribir
								{:
									RESULT = escribir;
								:}
							| sent_leer:leer
								{:
									RESULT = leer;
								:}
							| sent_if:decision
								{:
									RESULT = decision;
								:}
							| sent_for:buclepara
								{:
									RESULT = buclepara;
								:}
							| sent_do:buclehaga
								{:
									RESULT = buclehaga;
								:}
							| sent_while:buclemientras
								{:
									RESULT = buclemientras;
								:}
							| call_proc:callproc
								{:
									RESULT = callproc;
								:};

sent_declaracion		::=	tipo_dato:dato list_var:listvar
							{:
								/*-----------------------------------------------------------------------*/
								/*	Ingresando variables a la tabla de simbolos							*/
								/*-----------------------------------------------------------------------*/
								String namevar;/*	Nombre de la variable	*/
								int tam;/*	Tamaño del vector, -1 por defecto	*/
								
								/*	Si solo se declaro una variable listvar es un nodo IDENTIFICADOR	*/
								if(listvar.getTipo()==TIPO.IDENTIFICADOR){
									namevar = ((Identificador)listvar).getNamevar();
									tam = ((Identificador)listvar).getTam();
									/*	Si se declara un vector	*/
									if(((Identificador)listvar).isVector())
										tabla_simbolos.add(new Variable(dato,namevar,tam));
									else
										tabla_simbolos.add(new Variable(dato,namevar));										
								}else{
									/*	Si se declara mas de una variable en la linea se
										crea un nodo listvar	*/
									/*	Busco los nodos hojas (IDENTIFICADOR) a partir 
										del nodo listvar*/
									Identificador tmp = (Identificador)listvar.getFirstLeaf();									
									for(int i=0;i<listvar.getLeafCount();i++){
										namevar = tmp.getNamevar();
										tam = tmp.getTam();
										/*	Si se declara un vector	*/
										if(tmp.isVector())
											tabla_simbolos.add(new Variable(dato,namevar,tam));
										else
											tabla_simbolos.add(new Variable(dato,namevar));
											
										tmp = (Identificador)tmp.getNextLeaf();
									}
								}									
								/*-----------------------------------------------------------------------*/
								RESULT = new Declaracion(dato,listvar);
							:}
							;

tipo_dato				::= INTEGER {:	RESULT = DATO.INTEGER; :}
							| FLOAT {:	RESULT = DATO.FLOAT; :}
							| STRING {:	RESULT = DATO.STRING; :};

list_var				::=	list_var:listvar COMMA ID:id
								{:
									Nodo tmp = new Nodo(TIPO.list_var);									
									tmp.add(listvar);
									tmp.add(new Identificador(id));
									
									RESULT = tmp;
								:}
							| list_var:listvar COMMA ID:id LPOPPER NUM_ENTERO:tam RPOPPER
								{:
									Nodo tmp = new Nodo(TIPO.list_var);									
									
									if(tam==0){									
										System.out.println("Error! - Vector declarado con tamaño 0");
									}else{
										tmp.add(listvar);
										tmp.add(new Identificador(id,tam));								
										RESULT = tmp;
									}
								:}
							| ID:id LPOPPER NUM_ENTERO:tam RPOPPER
								{:								
									if(tam==0)
										System.out.println("Error! - Vector declarado con tamaño 0");
									else
										RESULT = new Identificador(id,tam);
								:}
							| ID:id
								{:										
									RESULT = new Identificador(id);
								:};							
						
sent_asignacion			::= ID:id ASSIGN expresion_simple:list
								{:
									Asignacion tmp = new Asignacion(id,list);
									
									if(tabla_simbolos.setValor(id,tmp.getValor()))						
										RESULT = tmp;
									else
										System.out.println("Error! - Variable no declarada / Tipos de datos incorrecto");
								:}
							| ID:id LPOPPER NUM_ENTERO:pos RPOPPER ASSIGN expresion_simple:list
								{:
									Asignacion tmp = new Asignacion(id,list,pos);
									
									if(tabla_simbolos.setValor(id,tmp.getValor(),pos))						
										RESULT = tmp;
									else
										System.out.println("Error! - Variable no declarada / Tipos de datos incorrecto");								
								:}
							;
						
sent_escribir			::= PRINT list_impresion:list
								{:
									Nodo tmp = new Nodo(TIPO.sent_escribir);
									tmp.add(list);
									
									System.out.println();
									RESULT = tmp;
								:};

list_impresion			::= list_impresion:list CONCAT expresion_simple:exp	
								{:
									Nodo tmp = new Nodo(TIPO.list_impresion);
									tmp.add(list);
									tmp.add(exp);
									
									if(exp.getTipo()==TIPO.CONSTANTE)
										((Constante)exp).imprimir();									
									else
										((Operacion)exp).imprimir();	
									
									RESULT = tmp;
								:}
							| expresion_simple:exp
								{:
									if(exp.getTipo()==TIPO.CONSTANTE)
										((Constante)exp).imprimir();									
									else
										((Operacion)exp).imprimir();																		
									RESULT = exp;
								:}
							;
						
sent_leer				::=	INPUT ID:id
								{:
									Nodo tmp = new Nodo(TIPO.sent_leer);
									tmp.add(new Identificador(id));
									
									String lectura = buf.readLine();
									Object val;
									
									if(tabla_simbolos.getTipodatoAt(id)==DATO.STRING)
										val = lectura;
									else{
										if(tabla_simbolos.getTipodatoAt(id)==DATO.INTEGER)
											val = Integer.parseInt(lectura);
										else
											val = Float.parseFloat(lectura);
									}
									if(tabla_simbolos.setValor(id,val))
										RESULT = tmp;
									else
										System.out.println("Error! - Variable no declarada / Tipos de datos incorrecto");									
								:}							
							| INPUT ID:id LPOPPER NUM_ENTERO:pos RPOPPER
								{:
									Nodo tmp = new Nodo(TIPO.sent_leer);
									tmp.add(new Identificador(id,pos+1));
									
									String lectura = buf.readLine();
									Object val;
									
									if(tabla_simbolos.getTipodatoAt(id)==DATO.STRING)
										val = lectura;
									else{
										if(tabla_simbolos.getTipodatoAt(id)==DATO.INTEGER)
											val = Integer.parseInt(lectura);
										else
											val = Float.parseFloat(lectura);
									}
									if(tabla_simbolos.setValor(id,val,pos))
										RESULT = tmp;
									else
										System.out.println("Error! - Variable no declarada / Tipos de datos incorrecto");	
								:}
							| INPUT CADENA:cad COMMA ID:id
								{:
									Nodo tmp = new Nodo(TIPO.sent_leer);
									tmp.add(new Constante(cad + "? "));
									tmp.add(new Identificador(id));
									
									((Constante)tmp.getFirstChild()).imprimir();
									String lectura = buf.readLine();
									Object val;
									
									if(tabla_simbolos.getTipodatoAt(id)==DATO.STRING)
										val = lectura;
									else{
										if(tabla_simbolos.getTipodatoAt(id)==DATO.INTEGER)
											val = Integer.parseInt(lectura);
										else
											val = Float.parseFloat(lectura);
									}
									if(tabla_simbolos.setValor(id,val))
										RESULT = tmp;
									else
										System.out.println("Error! - Variable no declarada / Tipos de datos incorrecto");
								:}
							| INPUT CADENA:cad COMMA ID:id LPOPPER NUM_ENTERO:pos RPOPPER
								{:
									Nodo tmp = new Nodo(TIPO.sent_leer);
									tmp.add(new Constante(cad + "? "));
									tmp.add(new Identificador(id,pos+1));
									
									((Constante)tmp.getFirstChild()).imprimir();
									String lectura = buf.readLine();
									Object val;
									
									if(tabla_simbolos.getTipodatoAt(id)==DATO.STRING)
										val = lectura;
									else{
										if(tabla_simbolos.getTipodatoAt(id)==DATO.INTEGER)
											val = Integer.parseInt(lectura);
										else
											val = Float.parseFloat(lectura);
									}
									if(tabla_simbolos.setValor(id,val,pos))
										RESULT = tmp;
									else
										System.out.println("Error! - Variable no declarada / Tipos de datos incorrecto");
								:};
						
sent_if					::=	IF expresion_compuesta THEN NEW_LINE 
								secuencia_sent NEW_LINE
								ENDIF
							| IF expresion_compuesta THEN NEW_LINE 
								secuencia_sent NEW_LINE 
								ELSE NEW_LINE
								secuencia_sent NEW_LINE
								ENDIF;

sent_for				::= FOR ID ASSIGN expresion_simple TO expresion_simple NEW_LINE
								secuencia_sent NEW_LINE
								NEXT ID
							| FOR ID ASSIGN expresion_simple TO expresion_simple STEP expresion_simple NEW_LINE
								secuencia_sent NEW_LINE
								NEXT ID;
								
sent_do					::= DO NEW_LINE
								secuencia_sent NEW_LINE
								LOOP_UNTIL expresion_compuesta;
								
sent_while				::= WHILE expresion_compuesta NEW_LINE
								secuencia_sent NEW_LINE
								ENDWHILE;
								
def_proc				::=	PROCEDURE ID LPAREN RPAREN NEW_LINE
								secuencia_sent NEW_LINE
								ENDPROCEDURE
							| PROCEDURE ID LPAREN list_param RPAREN NEW_LINE
								secuencia_sent NEW_LINE
								ENDPROCEDURE;
	
list_param				::= list_param COMMA tipo_dato ID
							| tipo_dato ID;	
						
call_proc				::= ID LPAREN list_var RPAREN
							| ID LPAREN RPAREN;						

expresion_compuesta		::=	expresion_compuesta op_logico expresion_comparacion
						| expresion_comparacion;
						
op_logico				::=	AND | OR;

expresion_comparacion	::=	NOT expresion_simple op_comparacion expresion_simple
							| expresion_simple op_comparacion expresion_simple;
							
op_comparacion			::=	EQUAL | DIFFERENT
							| LESS_THAN | LESS_THAN_EQ
							| GREATER_THAN | GREATER_THAN_EQ;

/*-----------------------------------------------------------------------------------------------------------------------------*/
expresion_simple	::= expresion_simple:exp op_suma:operando term:term 
							{:
								Operacion tmp = new Operacion(operando);
								
								if(exp.getTipo()==TIPO.CONSTANTE && ((Constante)exp).getTipodato()==String.class
									|| term.getTipo()==TIPO.CONSTANTE && ((Constante)term).getTipodato()==String.class)									
										System.out.println("Error! - No se pueden realizar operaciones aritméticas con cadenas");
									else{
										tmp.add(exp);
										tmp.add(term);
										tmp.calcular();
										
										RESULT = tmp;
									}															
							:}
						| term:term
							{:
								RESULT = term;
							:};
						
op_suma				::=	PLUS {: RESULT = OP.SUMA; :}
						| MINUS {: RESULT = OP.RESTA; :};

term				::= term:term op_mult:operando factor:fac
							{:
								Operacion tmp = new Operacion(operando);
								
								if(term.getTipo()==TIPO.CONSTANTE && ((Constante)term).getTipodato()==String.class
									|| fac.getTipo()==TIPO.CONSTANTE && ((Constante)fac).getTipodato()==String.class)									
										System.out.println("Error! - No se pueden realizar operaciones aritméticas con cadenas");
									else{
										tmp.add(term);
										tmp.add(fac);
										tmp.calcular();
										
										RESULT = tmp;
									}					
								
							:}							
						| factor:factor
							{:
								RESULT = factor;
							:};
						
op_mult				::=	ASTERISK {: RESULT = OP.MULTIPLICACION; :}
						| SLASH {:	RESULT = OP.DIVISION; :}
						| MODULE {:	RESULT = OP.MODULO; :}
						| CIRCUMFLEX {:	RESULT = OP.POTENCIA; :};

factor				::= LPAREN expresion_simple:exp RPAREN
							{:
								RESULT = exp;
							:}
						| NUM_ENTERO:num
							{:
								RESULT = new Constante(num);
							:}
						| NUM_FLOTANTE:num
							{:
								RESULT = new Constante(num);
							:}
						| ID:id
							{:								
								RESULT = new Constante(tabla_simbolos.getValorAt(id));
							:}
						| ID:id LPOPPER NUM_ENTERO:pos RPOPPER
							{:								
								RESULT = new Constante(tabla_simbolos.getValorAt(id,pos));
							:}
						| CADENA:cad
							{:
								RESULT = new Constante(cad);
							:};