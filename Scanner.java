/* The following code was generated by JFlex 1.4.1 on 24/10/11 0:27 */

import java_cup.runtime.Symbol;
import java.io.FileInputStream;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 24/10/11 0:27 from the specification file
 * <tt>C:/Users/admin/Desktop/Interprete-basic/lexico/lexico.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  4,  0,  0,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    26,  0,  7,  0,  0, 56,  0, 12, 57, 58, 53, 51, 62, 52,  2, 54, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 61, 48, 50, 49,  0, 
     0, 47,  3, 21, 23, 22, 31, 45, 35, 30,  3,  3, 38,  3, 27, 20, 
    18,  3, 19, 39, 34, 24,  3, 41, 43,  3,  3, 59,  0, 60, 55,  0, 
     0, 46,  3, 15, 16, 10, 29, 44, 33, 28,  3,  3, 36, 11, 25, 14, 
    13,  3,  9, 37, 32, 17,  3, 40, 42,  3,  3,  0,  8,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\3\1"+
    "\1\5\27\1\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\3\1\0\1\27\4\26\1\30"+
    "\1\31\10\26\1\32\5\26\1\33\12\26\1\34\1\35"+
    "\1\36\1\37\1\0\1\5\1\40\5\26\1\40\2\26"+
    "\1\41\3\26\1\42\16\26\1\43\1\0\2\26\1\44"+
    "\4\26\1\0\2\26\1\45\6\26\1\46\2\26\1\47"+
    "\4\26\1\0\1\50\2\26\1\51\1\26\1\0\1\26"+
    "\1\52\1\26\1\53\1\26\1\0\1\26\1\0\1\26"+
    "\1\54\1\0\3\26\1\0\3\26\1\0\1\55\2\0"+
    "\3\26\1\0\1\26\1\56\3\0\1\57\2\26\4\0"+
    "\1\60\5\0\1\61\4\0\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\77\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\u08dc\0\275\0\u091b\0\u01b9\0\77\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\275\0\275\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\275\0\u0c4e\0\u0c8d\0\u0ccc"+
    "\0\u0d0b\0\u0d4a\0\275\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85"+
    "\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\77\0\77\0\77"+
    "\0\77\0\u013b\0\275\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\275\0\u1236\0\u1275\0\u12b4"+
    "\0\275\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\275"+
    "\0\u1665\0\u16a4\0\u16e3\0\275\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\u189c\0\275\0\u18db\0\u191a\0\u1959\0\u1998"+
    "\0\u19d7\0\u1a16\0\275\0\u1a55\0\u1a94\0\275\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\275\0\u1c0e\0\u1c4d\0\275\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\275\0\u1d49\0\275\0\u1d88\0\u1dc7\0\u1e06"+
    "\0\u1e45\0\u1e84\0\275\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\275\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\275\0\u22b3\0\u22f2\0\u2331"+
    "\0\275\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\275"+
    "\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\77\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\4\1\13\1\14\1\15\1\4"+
    "\1\16\1\4\1\17\1\4\1\20\1\4\1\21\1\22"+
    "\1\4\1\23\1\7\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\4\1\32\1\4\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\4\4\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\100\0\1\3\1\62\75\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\25\63\23\0\1\5\1\64\75\0\1\64\100\0\1\7"+
    "\23\0\1\7\44\0\4\65\2\0\1\65\1\66\1\0"+
    "\60\65\2\0\4\65\1\0\1\63\1\0\1\63\5\0"+
    "\1\63\1\67\1\63\1\0\15\63\1\0\25\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\14\63\1\70"+
    "\1\0\11\63\1\71\13\63\20\0\1\63\1\0\1\63"+
    "\5\0\1\72\2\63\1\0\15\63\1\0\25\63\20\0"+
    "\1\63\1\0\1\63\5\0\1\73\2\63\1\0\15\63"+
    "\1\0\25\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\1\63\1\74\13\63\1\0\25\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\6\63\1\75\6\63"+
    "\1\0\25\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\6\63\1\73\6\63\1\0\25\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\15\63\1\0\1\76"+
    "\12\63\1\77\11\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\7\63\1\74\5\63\1\0\25\63\20\0"+
    "\1\63\1\0\1\63\5\0\1\63\1\100\1\63\1\0"+
    "\1\63\1\101\13\63\1\0\25\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\7\63\1\102\1\63\1\103"+
    "\3\63\1\0\25\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\14\63\1\104\1\0\2\63\1\105\22\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\1\63"+
    "\1\106\13\63\1\0\11\63\1\107\13\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\15\63\1\0\1\110"+
    "\3\63\1\105\20\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\7\63\1\111\5\63\1\0\13\63\1\112"+
    "\11\63\20\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\1\63\1\113\13\63\1\0\6\63\1\114\16\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\7\63\1\113"+
    "\5\63\1\0\10\63\1\115\14\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\1\63\1\116\13\63\1\0"+
    "\25\63\20\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\15\63\1\0\5\63\1\117\17\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\7\63\1\120\5\63\1\0"+
    "\25\63\20\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\15\63\1\0\7\63\1\121\15\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\15\63\1\0\6\63\1\122"+
    "\16\63\20\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\15\63\1\0\10\63\1\123\14\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\14\63\1\124\1\0\25\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\15\63"+
    "\1\0\1\125\24\63\100\0\1\126\1\127\76\0\1\130"+
    "\76\0\1\131\15\0\1\62\101\0\1\5\1\132\72\0"+
    "\1\63\1\0\1\63\5\0\2\63\1\133\1\0\15\63"+
    "\1\0\25\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\3\63\1\134\11\63\1\0\25\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\15\63\1\0\12\63"+
    "\1\135\12\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\1\63\1\136\13\63\1\0\1\63\1\137\23\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\7\63"+
    "\1\140\5\63\1\0\3\63\1\141\21\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\12\63\1\142\2\63"+
    "\1\0\25\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\15\63\1\0\14\63\1\143\10\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\15\63\1\0\17\63"+
    "\1\144\5\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\15\63\1\0\5\63\1\145\17\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\15\63\1\0\7\63"+
    "\1\145\15\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\15\63\1\0\20\63\1\146\4\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\1\147\14\63\1\0"+
    "\5\63\1\150\17\63\20\0\1\63\1\0\1\63\5\0"+
    "\1\151\2\63\1\0\15\63\1\0\25\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\1\63\1\152\13\63"+
    "\1\0\25\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\5\63\1\153\7\63\1\0\7\63\1\154\15\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\6\63"+
    "\1\151\6\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\7\63\1\155\5\63\1\0\25\63"+
    "\20\0\1\63\1\0\1\63\5\0\1\63\1\156\1\63"+
    "\1\0\15\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\11\63\1\157\3\63\1\0\25\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\1\63"+
    "\1\160\13\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\1\161\1\162\1\63\1\0\15\63\1\0\25\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\7\63"+
    "\1\163\5\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\6\63\1\164\2\63\1\165\3\63"+
    "\1\0\25\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\15\63\1\0\1\63\1\166\23\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\15\63\1\0\3\63"+
    "\1\167\21\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\3\63\1\170\11\63\1\0\25\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\12\63\1\170\2\63"+
    "\1\0\25\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\15\63\1\171\1\63\1\172\13\63\1\173\7\63"+
    "\20\0\1\63\1\0\1\63\5\0\1\63\1\174\1\63"+
    "\1\0\15\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\2\63\1\175\12\63\1\0\25\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\14\63"+
    "\1\176\1\0\25\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\10\63\1\177\4\63\1\0\25\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\1\200\24\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\15\63\1\201\3\63\1\202\12\63\1\203\6\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\11\63"+
    "\1\174\3\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\15\63\1\0\5\63\1\204\17\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\15\63"+
    "\1\0\7\63\1\204\15\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\4\63\1\205\10\63\1\0\25\63"+
    "\20\0\1\63\1\0\1\63\5\0\1\63\1\206\1\63"+
    "\1\0\15\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\15\63\1\0\23\63\1\207\1\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\13\63"+
    "\1\210\1\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\11\63\1\211\3\63\1\0\25\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\15\63"+
    "\1\0\24\63\1\212\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\14\63\1\213\1\0\25\63\20\0\1\63"+
    "\1\0\1\63\5\0\3\63\1\0\15\63\1\0\1\213"+
    "\24\63\20\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\1\214\14\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\15\63\1\0\1\63\1\215\23\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\1\216"+
    "\14\63\1\0\25\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\5\63\1\217\7\63\1\0\25\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\3\63\1\220\21\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\5\63\1\216\7\63\1\0\25\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\11\63\1\221\13\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\15\63\1\0\13\63\1\222\11\63\34\0"+
    "\1\223\62\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\15\63\1\0\2\63\1\224\22\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\15\63\1\0\6\63\1\225"+
    "\16\63\20\0\1\63\1\0\1\63\5\0\1\63\1\226"+
    "\1\63\1\0\15\63\1\0\25\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\15\63\1\0\5\63\1\227"+
    "\17\63\20\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\11\63\1\230\3\63\1\0\25\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\15\63\1\0\7\63\1\227"+
    "\15\63\41\0\1\231\55\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\15\63\1\0\4\63\1\224\20\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\10\63\1\232\14\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\15\63\1\0\5\63\1\233\17\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\21\63\1\234\3\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\15\63\1\0\5\63\1\235\17\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\7\63\1\233\15\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\15\63\1\0\22\63\1\236\2\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\7\63\1\235\15\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\15\63\1\237\25\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\14\63\1\240\1\0\25\63"+
    "\20\0\1\63\1\0\1\63\5\0\3\63\1\0\15\63"+
    "\1\241\25\63\20\0\1\63\1\0\1\63\5\0\3\63"+
    "\1\0\15\63\1\0\1\242\24\63\20\0\1\63\1\0"+
    "\1\63\5\0\1\63\1\243\1\63\1\0\15\63\1\0"+
    "\25\63\20\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\11\63\1\243\3\63\1\0\25\63\30\0\1\244\66\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\1\63\1\245\23\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\3\63\1\246\11\63\1\0\25\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\12\63\1\247"+
    "\2\63\1\0\25\63\42\0\1\250\54\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\15\63\1\0\3\63\1\251"+
    "\21\63\20\0\1\63\1\0\1\63\5\0\1\63\1\252"+
    "\1\63\1\0\15\63\1\0\25\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\11\63\1\253\3\63\1\0"+
    "\25\63\40\0\1\254\56\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\15\63\1\0\21\63\1\255\3\63\47\0"+
    "\1\256\47\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\15\63\1\0\22\63\1\255\2\63\35\0\1\257\61\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\15\63\1\0"+
    "\11\63\1\260\13\63\20\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\4\63\1\261\10\63\1\0\25\63\20\0"+
    "\1\63\1\0\1\63\5\0\3\63\1\0\13\63\1\262"+
    "\1\63\1\0\25\63\43\0\1\263\53\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\15\63\1\0\13\63\1\264"+
    "\11\63\20\0\1\63\1\0\1\63\5\0\1\265\2\63"+
    "\1\0\15\63\1\0\25\63\20\0\1\63\1\0\1\63"+
    "\5\0\3\63\1\0\6\63\1\265\6\63\1\0\25\63"+
    "\50\0\1\266\100\0\1\267\62\0\1\270\60\0\1\63"+
    "\1\0\1\63\5\0\1\63\1\271\1\63\1\0\15\63"+
    "\1\0\25\63\20\0\1\63\1\0\1\63\5\0\1\272"+
    "\2\63\1\0\15\63\1\0\25\63\20\0\1\63\1\0"+
    "\1\63\5\0\3\63\1\0\6\63\1\273\6\63\1\0"+
    "\25\63\44\0\1\274\52\0\1\63\1\0\1\63\5\0"+
    "\3\63\1\0\11\63\1\271\3\63\1\0\25\63\57\0"+
    "\1\275\100\0\1\276\46\0\1\277\65\0\1\63\1\0"+
    "\1\63\5\0\1\63\1\300\1\63\1\0\15\63\1\0"+
    "\25\63\20\0\1\63\1\0\1\63\5\0\3\63\1\0"+
    "\11\63\1\300\3\63\1\0\25\63\45\0\1\301\104\0"+
    "\1\302\100\0\1\303\60\0\1\304\105\0\1\305\113\0"+
    "\1\306\100\0\1\306\51\0\1\307\105\0\1\310\57\0"+
    "\1\311\110\0\1\312\65\0\1\313\112\0\1\313\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10017];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\32\1\14\11\3\1\1\0"+
    "\1\11\37\1\4\11\1\0\36\1\1\0\7\1\1\0"+
    "\21\1\1\0\5\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\1\1\2\0"+
    "\3\1\1\0\2\1\3\0\3\1\4\0\1\1\5\0"+
    "\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { System.out.println("token WHILE");
			//return new java_cup.runtime.Symbol(sym.WHILE);
          }
        case 51: break;
        case 33: 
          { System.out.println("token NOT");
			//return new java_cup.runtime.Symbol(sym.NOT);
          }
        case 52: break;
        case 41: 
          { System.out.println("token PRINT");
			//return new java_cup.runtime.Symbol(sym.PRINT);
          }
        case 53: break;
        case 3: 
          { System.out.println("token NEW_LINE");
			numlinea++;
			//return new java_cup.runtime.Symbol(sym.NEW_LINE);
          }
        case 54: break;
        case 16: 
          { System.out.println("token RPAREN");
			//return new java_cup.runtime.Symbol(sym.RPAREN);
          }
        case 55: break;
        case 11: 
          { System.out.println("token ASTERISK");
			//return new java_cup.runtime.Symbol(sym.ASTERISK);
          }
        case 56: break;
        case 10: 
          { System.out.println("token MINUS");
			//return new java_cup.runtime.Symbol(sym.MINUS);
          }
        case 57: break;
        case 31: 
          { System.out.println("token EQUAL");
			//return new java_cup.runtime.Symbol(sym.EQUAL);
          }
        case 58: break;
        case 34: 
          { System.out.println("token FOR");
			//return new java_cup.runtime.Symbol(sym.FOR);
          }
        case 59: break;
        case 30: 
          { System.out.println("token GREATER_THAN_EQ");
			//return new java_cup.runtime.Symbol(sym.GREATER_THAN_EQ);
          }
        case 60: break;
        case 35: 
          { System.out.println("token AND");
			//return new java_cup.runtime.Symbol(sym.AND);
          }
        case 61: break;
        case 18: 
          { System.out.println("token RPOPPER");
			//return new java_cup.runtime.Symbol(sym.RPOPPER);
          }
        case 62: break;
        case 37: 
          { System.out.println("token NEXT");
			//return new java_cup.runtime.Symbol(sym.NEXT);
          }
        case 63: break;
        case 15: 
          { System.out.println("token LPAREN");
			//return new java_cup.runtime.Symbol(sym.LPAREN);
          }
        case 64: break;
        case 24: 
          { System.out.println("token OR");
			//return new java_cup.runtime.Symbol(sym.OR);
          }
        case 65: break;
        case 20: 
          { System.out.println("token CONCAT");
			//return new java_cup.runtime.Symbol(sym.COMMA);
          }
        case 66: break;
        case 2: 
          { System.out.println("token NUM_ENTERO");
			//return new java_cup.runtime.Symbol(sym.NUM_ENTERO);
          }
        case 67: break;
        case 38: 
          { System.out.println("token THEN");
			//return new java_cup.runtime.Symbol(sym.THEN);
          }
        case 68: break;
        case 49: 
          { System.out.println("token LOOP_UNTIL");
			//return new java_cup.runtime.Symbol(sym.LOOP_UNTIL);
          }
        case 69: break;
        case 1: 
          { System.err.println("Caracter Ilegal encontrado en analisis lexico: **" + yytext() + "**");
          }
        case 70: break;
        case 6: 
          { System.out.println("token LESS_THAN");
			//return new java_cup.runtime.Symbol(sym.LESS_THAN);
          }
        case 71: break;
        case 48: 
          { System.out.println("token PROCEDURE");
			//return new java_cup.runtime.Symbol(sym.PROCEDURE);
          }
        case 72: break;
        case 25: 
          { System.out.println("token DO");
			//return new java_cup.runtime.Symbol(sym.DO);
          }
        case 73: break;
        case 17: 
          { System.out.println("token LPOPPER");
			//return new java_cup.runtime.Symbol(sym.LPOPPER);
          }
        case 74: break;
        case 46: 
          { System.out.println("token INTEGER");
			//return new java_cup.runtime.Symbol(sym.INTEGER);
          }
        case 75: break;
        case 43: 
          { System.out.println("token FLOAT");
			//return new java_cup.runtime.Symbol(sym.FLOAT);
          }
        case 76: break;
        case 23: 
          { System.out.println("token CADENA");
			//return new java_cup.runtime.Symbol(sym.CADENA);
          }
        case 77: break;
        case 39: 
          { System.out.println("token STEP");
			//return new java_cup.runtime.Symbol(sym.STEP);
          }
        case 78: break;
        case 13: 
          { System.out.println("token CIRCUMFLEX");
			//return new java_cup.runtime.Symbol(sym.CIRCUMFLEX);
          }
        case 79: break;
        case 22: 
          { System.out.println("token ID");
			//return new java_cup.runtime.Symbol(sym.ID);
          }
        case 80: break;
        case 19: 
          { System.out.println("token CONCAT");
			//return new java_cup.runtime.Symbol(sym.CONCAT);
          }
        case 81: break;
        case 21: 
          { System.out.println("token NUM_FLOTANTE");
			//return new java_cup.runtime.Symbol(sym.NUM_FLOTANTE);
          }
        case 82: break;
        case 26: 
          { System.out.println("token IF");
			//return new java_cup.runtime.Symbol(sym.IF);
          }
        case 83: break;
        case 8: 
          { System.out.println("token ASSIGN");
			//return new java_cup.runtime.Symbol(sym.ASSIGN);
          }
        case 84: break;
        case 47: 
          { System.out.println("token ENDWHILE");
			//return new java_cup.runtime.Symbol(sym.ENDWHILE);
          }
        case 85: break;
        case 5: 
          { System.out.println("token COMENTARIO"); /*No tomo en cuenta los comentarios*/
          }
        case 86: break;
        case 12: 
          { System.out.println("token SLASH");
			//return new java_cup.runtime.Symbol(sym.SLASH);
          }
        case 87: break;
        case 27: 
          { System.out.println("token TO");
			//return new java_cup.runtime.Symbol(sym.TO);
          }
        case 88: break;
        case 40: 
          { System.out.println("token ENDIF");
			//return new java_cup.runtime.Symbol(sym.ENDIF);
          }
        case 89: break;
        case 32: 
          { System.out.println("token END");
			//return new java_cup.runtime.Symbol(sym.END);
          }
        case 90: break;
        case 4: 
          { /* No tomo en cuenta espacios en blanco*/
          }
        case 91: break;
        case 14: 
          { System.out.println("token MODULE");
			//return new java_cup.runtime.Symbol(sym.MODULE);
          }
        case 92: break;
        case 42: 
          { System.out.println("token INPUT");
			//return new java_cup.runtime.Symbol(sym.INPUT);
          }
        case 93: break;
        case 7: 
          { System.out.println("token GREATER_THAN");
			//return new java_cup.runtime.Symbol(sym.GREATER_THAN);
          }
        case 94: break;
        case 28: 
          { System.out.println("token DIFFERENT");
			//return new java_cup.runtime.Symbol(sym.DIFFERENT);
          }
        case 95: break;
        case 29: 
          { System.out.println("token LESS_THAN_EQ");
			//return new java_cup.runtime.Symbol(sym.LESS_THAN_EQ);
          }
        case 96: break;
        case 36: 
          { System.out.println("token ELSE");
			//    return new java_cup.runtime.Symbol(sym.ELSE);
          }
        case 97: break;
        case 45: 
          { System.out.println("token STRING");
			//return new java_cup.runtime.Symbol(sym.STRING);
          }
        case 98: break;
        case 50: 
          { System.out.println("token ENDPROCEDURE");
			//return new java_cup.runtime.Symbol(sym.ENDPROCEDURE);
          }
        case 99: break;
        case 9: 
          { System.out.println("token PLUS");
			//return new java_cup.runtime.Symbol(sym.PLUS);
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return new java_cup.runtime.Symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
